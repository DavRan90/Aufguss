@page "/Events/Create"
@attribute [Authorize(Roles = "Admin,SuperAdmin")]
@using System.Text.Json.Nodes
@using Aufguss.Models


<div class="row mb-5">
    <div class="col-lg-8">
        <h1 class=mb-5>Ny aktivitet</h1>

        @if (Templates != null)
        {
            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Använd mall</label>
                <div class="col-md-8">
                    <InputSelect class="form-control" @bind-Value="SelectedTemplateId">
                        <option value="">-- Välj en mall --</option>
                        @foreach (var template in Templates)
                        {
                            <option value="@template.Id">@template.Title (@template.Start.ToString("dd/MM-yyyy | HH:mm"))</option>
                        }
                    </InputSelect>
                </div>
            </div>
        }


        <div class="row mb-3">
            <label class="col-md-4 col-form-label">Kön</label>

            <div class="col-md-8">
                <div class="row gap-2 gap-md-1">
                    <div class="col-12 col-md-6 d-flex align-items-center">
                        <input type="radio"
                        checked="@(EventDtoData.Gender == Gender.Male)"
                        name="Gender"
                        @onchange="@(() => EventDtoData.Gender = Gender.Male)" />
                        <label class="btn btn-primary ms-2">Herrar</label>
                    </div>

                    <div class="col-12 col-md-6 d-flex align-items-center">
                        <input type="radio"
                        checked="@(EventDtoData.Gender == Gender.Female)"
                        name="Gender"
                        @onchange="@(() => EventDtoData.Gender = Gender.Female)" />
                        <label class="btn btn-danger ms-2">Damer</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <label class="col-md-4 col-form-label">Titel</label>
            <div class="col-md-8">
                <InputText class="form-control" @bind-Value="EventDtoData.Title" />
                <span class="text-danger">@Errors["Title"]?[0]</span>
            </div>
        </div>

        <div class="row mb-3">
            @if (templateLoaded)
            {
                <div class="alert alert-warning" role="alert">
                    ⚠️ Tänk på att uppdatera datum och tid!
                </div>
            }

            <label class="col-md-4 col-form-label">Starttid</label>
            <div class="col-md-8">
                <input type="datetime-local" class="form-control" @bind="EventDtoData.Start">
                <span class="text-danger">@Errors["Start"]?[0]</span>
            </div>
        </div>
        <div class="row mb-3">
            <label class="col-md-4 col-form-label">Sluttid</label>
            <div class="col-md-8">
                <input type="datetime-local" class="form-control" @bind="EventDtoData.End">
                <span class="text-danger">@Errors["End"]?[0]</span>
            </div>
        </div>

        <div class="row mb-3">
            <label class="col-md-4 col-form-label">Max antal gäster</label>
            <div class="col-md-8">
                <input class="form-control" type="number" @bind="EventDtoData.MaxSlots">
            </div>
        </div>

        <div class="row mb-3">
            <label class="col-md-4 col-form-label">Beskrivning</label>
            <div class="col-md-8">
                <textarea class="form-control" @bind="EventDtoData.Description"></textarea>
                <span class="text-danger">@Errors["Description"]?[0]</span>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-8 offset-md-4">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="recurring" @bind="EventDtoData.Recurring">
                    <label class="form-check-label" for="recurring">
                        Återkommande
                        <span class="ms-1" data-bs-toggle="tooltip" data-bs-trigger="click" title="Om återkommande pass önskas">
                            <i class="bi bi-info-circle text-secondary"></i>
                        </span>
                    </label>
                </div>
            </div>
        </div>

        @if (EventDtoData.Recurring)
        {
            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Frekvens</label>
                <div class="col-md-8">
                    <InputSelect class="form-control" @bind-Value="frequency">
                        <option value="">-- Välj frekvens --</option>
                        @for (int i = 1; i < 7; i++)
                        {
                            <option value="@i">Efter @i veckor</option>
                        }
                    </InputSelect>
                </div>

            </div>
            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Slutdatum</label>
                <div class="col-md-8">
                    <input type="datetime-local" class="form-control" @bind="EndDate">
                    <span class="text-danger">@Errors["Recurring"]?[0]</span>
                </div>
            </div>
        }
        <div class="row mb-3">
            <div class="col-md-8 offset-md-4">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="friend" @bind="EventDtoData.AllowFriendBooking">
                    <label class="form-check-label" for="friend">
                        Tillåt vänbokning
                        <span class="ms-1" data-bs-toggle="tooltip" title="TIllåt inbokning av en registrerad aufgussvän">
                            <i class="bi bi-info-circle text-secondary"></i>
                        </span>
                    </label>
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-8 offset-md-4">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="survey" @bind="EventDtoData.IncludeSurvey" disabled>
                    <label class="form-check-label" for="survey">
                        Enkät
                        <span class="ms-1" data-bs-toggle="tooltip" title="Om enkät ska göras i samband med passet">
                            <i class="bi bi-info-circle text-secondary"></i>
                        </span>
                    </label>
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-8 offset-md-4">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="hidden" @bind="EventDtoData.Hidden">
                    <label class="form-check-label" for="hidden">
                        Dold
                        <span class="ms-1" data-bs-toggle="tooltip" title="Detta pass, om dolt, syns inte bland gästernas pass">
                            <i class="bi bi-info-circle text-secondary"></i>
                        </span>
                    </label>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-8 offset-md-4">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="createnews" @bind="createNews" disabled>
                    <label class="form-check-label" for="createnews">
                        Skapa nyhet
                        <span class="ms-1" data-bs-toggle="tooltip" title="Skapar en nyhet om detta pass på startsidan">
                            <i class="bi bi-info-circle text-secondary"></i>
                        </span>
                    </label>
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-8 offset-md-4">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="template" @bind="createTemplate" disabled>
                    <label class="form-check-label" for="template">
                        Skapa mall
                        <span class="ms-1" data-bs-toggle="tooltip" title="Skapar en mall baserad på denna bokning">
                            <i class="bi bi-info-circle text-secondary"></i>
                        </span>
                    </label>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="offset-md-4 col-md-4 d-grid">
                <button class="btn btn-primary" @onclick="SaveEvent">Skapa</button>
            </div>
            <div class="col-md-4 d-grid">
                <a class="btn btn-outline-primary" href="/Events">Avbryt</a>
            </div>
        </div>
    </div>
</div>

@inject HttpClient Http
@inject NavigationManager navManager
@inject ITemplateService TemplateService
@inject IEventService EventService

@code {
    private bool Survey = false;
    private DateTime EndDate = DateTime.Now;
    private List<EventTemplate>? Templates;
    private int frequency;
    public EventDto EventDtoData { get; set; } = new();
    public JsonNode Errors { get; set; } = new JsonObject();
    public bool createNews = false;
    public bool createTemplate = false;

    private bool templateLoaded = false;

    private string selectedGender = "Male"; // Default selection

    // private int? SelectedTemplateId { get; set; }

    private int? selectedTemplateId;
    private int? SelectedTemplateId
    {
        get => selectedTemplateId;
        set
        {
            if (selectedTemplateId != value)
            {
                selectedTemplateId = value;
                ApplyTemplate(); // Call your apply method here directly
            }
        }
    }


    private void ApplyTemplate()
    {
        if (SelectedTemplateId.HasValue)
        {
            templateLoaded = true;
            var selectedTemplate = Templates.FirstOrDefault(t => t.Id == SelectedTemplateId.Value);
            if (selectedTemplate is not null)
            {
                EventDtoData.Title = selectedTemplate.Title;
                EventDtoData.Description = selectedTemplate.Description;
                EventDtoData.Gender = selectedTemplate.Gender;
                EventDtoData.Start = selectedTemplate.Start;
                EventDtoData.End = selectedTemplate.End;
                EventDtoData.MaxSlots = selectedTemplate.MaxSlots;
                EventDtoData.Recurring = selectedTemplate.Recurring;
                EventDtoData.Hidden = selectedTemplate.Hidden;
                EventDtoData.AllowFriendBooking = selectedTemplate.AllowFriendBooking;
                StateHasChanged();
            }
        }
    }

    private async Task OnTemplateSelected(ChangeEventArgs e)
    {
        Console.WriteLine("🚀 OnTemplateSelected triggered");

        if (int.TryParse(e.Value?.ToString(), out var templateId))
        {
            SelectedTemplateId = templateId;

            var selectedTemplate = Templates.FirstOrDefault(t => t.Id == templateId);

            if (selectedTemplate is not null)
            {
                Console.WriteLine($"Template found: {selectedTemplate.Title}");

                EventDtoData.Title = selectedTemplate.Title;
                EventDtoData.Description = selectedTemplate.Description;
                EventDtoData.Gender = selectedTemplate.Gender;
                EventDtoData.Start = selectedTemplate.Start;
                EventDtoData.End = selectedTemplate.End;
                EventDtoData.MaxSlots = selectedTemplate.MaxSlots;
                EventDtoData.Recurring = selectedTemplate.Recurring;
                EventDtoData.Hidden = selectedTemplate.Hidden;
                EventDtoData.AllowFriendBooking = selectedTemplate.AllowFriendBooking;
            }

            await InvokeAsync(StateHasChanged);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        // Templates = await Http.GetFromJsonAsync<List<EventTemplate>>("api/EventTemplates");
        Templates = await TemplateService.GetTemplatesAsync();
    }

    private async Task CheckFormData()
    {
        if (EventDtoData.End <= EventDtoData.Start)
        {
            Errors["End"] = new JsonArray("Sluttid måste vara efter starttid.");
            // return;
        }

        if (EventDtoData.Start <= DateTime.Now)
        {
            Errors["Start"] = new JsonArray("Starttiden har redan passerat");
            // return;
        }

        if (EventDtoData.Recurring)
        {
            if ((EndDate - EventDtoData.Start).TotalDays < 7)
            {
                Errors = new JsonObject
                    {
                        ["Recurring"] = new JsonArray("Slutdatumet tillåter inga återkommande pass.")
                    };

                // return;
            }
        }
    }

    private async Task SaveEvent()
    {
        if (EventDtoData.End <= EventDtoData.Start)
        {
            Errors["End"] = new JsonArray("Sluttid måste vara efter starttid.");
            return;
        }

        if (EventDtoData.Start <= DateTime.Now)
        {
            Errors["Start"] = new JsonArray("Starttiden har redan passerat");
            return;
        }

        if (EventDtoData.Recurring)
        {
            if ((EndDate - EventDtoData.Start).TotalDays < 7)
            {
                Errors = new JsonObject
                    {
                        ["Recurring"] = new JsonArray("Slutdatumet tillåter inga återkommande pass.")
                    };

                return;
            }
            else
            {
                while (EndDate > EventDtoData.Start)
                {
                    // var res = await Http.PostAsJsonAsync("api/Events", EventDtoData);
                    var res = await EventService.AddEventAsync(EventDtoData);

                    EventDtoData.Start = EventDtoData.Start.AddDays(7 * frequency);

                    // if (res.IsSuccessStatusCode)
                    // {
                    //     EventDtoData.Start = EventDtoData.Start.AddDays(7 * frequency);
                    // }
                    // else
                    // {
                    //     var strResponse = await res.Content.ReadAsStringAsync();
                    //     Console.WriteLine("Json Response: \n" + strResponse);

                    //     try
                    //     {
                    //         var jsonResponse = JsonNode.Parse(strResponse);
                    //         Errors = jsonResponse?["errors"] ?? new JsonObject();
                    //     }
                    //     catch (Exception ex)
                    //     {
                    //         Console.WriteLine("Exception: " + ex.Message);
                    //     }
                    //     break;
                    // }
                }
                navManager.NavigateTo("/Events");
            }

        }
        else
        {
            try
            {
                var evts = await EventService.AddEventAsync(EventDtoData);
                navManager.NavigateTo("/Events");
            }
            catch
            {

            }

            //     var response = await Http.PostAsJsonAsync("api/Events", EventDtoData);

            //     if (response.IsSuccessStatusCode)
            //     {
            //         if (createTemplate)
            //         {
            //             var template = await Http.PostAsJsonAsync("api/EventTemplates", EventDtoData);
            //         }


            //         var createdEvent = await response.Content.ReadFromJsonAsync<Event>();
            //         if (createdEvent.Hidden == false && createNews == true)
            //         {
            //             var entry = new EntryDto
            //                 {
            //                     Title = createdEvent.Title + " | " + createdEvent.Start.ToString("dd-MM-yyyy | HH:mm"),
            //                     Description = createdEvent.Description,
            //                     Url = createdEvent.Id.ToString(),
            //                     Image = "https://aufgussapi-d6f4dae9g9h3a2h8.northeurope-01.azurewebsites.net/upload/aufguss 2.jpg"
            //                 };
            //             var response2 = await Http.PostAsJsonAsync("api/Entries", entry);

            //             if (response2.IsSuccessStatusCode)
            //             {

            //                 navManager.NavigateTo("/");
            //             }

            //             else
            //             {
            //                 var strResponse = await response2.Content.ReadAsStringAsync();
            //                 Console.WriteLine("Json Response: \n" + strResponse);

            //                 try
            //                 {
            //                     var jsonResponse = JsonNode.Parse(strResponse);
            //                     Errors = jsonResponse?["errors"] ?? new JsonObject();
            //                 }
            //                 catch (Exception ex)
            //                 {
            //                     Console.WriteLine("Exception: " + ex.Message);
            //                 }
            //             }
            //         }



            //         navManager.NavigateTo("/Events");
            //     }

            //     else
            //     {
            //         var strResponse = await response.Content.ReadAsStringAsync();
            //         Console.WriteLine("Json Response: \n" + strResponse);

            //         try
            //         {
            //             var jsonResponse = JsonNode.Parse(strResponse);
            //             Errors = jsonResponse?["errors"] ?? new JsonObject();
            //         }
            //         catch (Exception ex)
            //         {
            //             Console.WriteLine("Exception: " + ex.Message);
            //         }
            //     }
            // }
        }
    }
}