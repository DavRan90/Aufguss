@page "/Events/Edit/{id:int}"
@attribute [Authorize(Roles = "Admin,SuperAdmin")]
@using System.Text.Json.Nodes
@using System.Text.Json
@using Aufguss.Models

<div class="row mb-5">
    <div class="col-lg-8">
        <h1 class=mb-5>Ändra aktivitet</h1>

        @if (eventData == null)
        {
            <p><em>Laddar...</em></p>
        }

        else
        {
            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Id</label>
                <div class="col-md-8">
                    <input class="form-control-plaintext" readonly value="@Id">
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Kön</label>

                <div class="col-md-8">
                    <div class="row gap-2 gap-md-1">
                        <div class="col-12 col-md-6 d-flex align-items-center">
                            <input type="radio"
                            checked="@(EventDtoData.Gender == Gender.Male)"
                            name="Gender"
                            @onchange="@(() => EventDtoData.Gender = Gender.Male)" />
                            <label class="btn btn-primary ms-2">Herrar</label>
                        </div>

                        <div class="col-12 col-md-6 d-flex align-items-center">
                            <input type="radio"
                            checked="@(EventDtoData.Gender == Gender.Female)"
                            name="Gender"
                            @onchange="@(() => EventDtoData.Gender = Gender.Female)" />
                            <label class="btn btn-danger ms-2">Damer</label>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Titel</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="EventDtoData.Title">
                    <span class="text-danger">@Errors["Title"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Datum/tid</label>
                <div class="col-md-8">
                    <input type="datetime-local" class="form-control" @bind="EventDtoData.Start">
                    <span class="text-danger">@Errors["Start"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Max antal gäster</label>
                <div class="col-md-8">
                    <input class="form-control" type="number" @bind="EventDtoData.MaxSlots">
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Beskrivning</label>
                <div class="col-md-8">
                    <textarea class="form-control" @bind="EventDtoData.Description"></textarea>
                    <span class="text-danger">@Errors["Description"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-8 offset-md-4">
                    <div>
                        <input type="checkbox" id="gridCheck2" @bind="EventDtoData.Hidden">
                        <label style="vertical-align: top;" class="form-check-label m-1" for="gridCheck2">
                            Dold
                        </label>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-8 offset-md-4">
                    <div>
                        <input type="checkbox" id="gridCheck3" @bind="EventDtoData.AllowFriendBooking">
                        <label style="vertical-align: top;" class="form-check-label m-1" for="gridCheck3">
                            Tillåt vänbokning
                        </label>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="offset-md-4 col-md-4 d-grid">
                    <button class="btn btn-primary" @onclick="SaveEvent">Spara</button>
                </div>
                <div class="col-md-4 d-grid">
                    <a class="btn btn-outline-primary" href="/Events">Avbryt</a>
                </div>
            </div>
        }

    </div>
</div>

<p>Inkludera avbokade</p>
<input type="checkbox" @bind="Value" />
<p></p>
<p>Inkludera reserver</p>
<input type="checkbox" @bind="ShowReserve" />
<p></p>

@if (Bookings != null)
{
    <table class="table mb-5">
        <thead>
            <tr>

                @* <th>ID</th> *@
                <th>Namn</th>
                <th>Mail</th>
                <th>Tel</th>
                @* <th>Datum</th> *@
                <th>Reserv</th>
                <th>Avbokad</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in Bookings.Where(b => !b.Unbooked && !b.Reserve || (Value && b.Unbooked) || (ShowReserve && b.Reserve)))
            {
                @* <tr> *@
                <tr style="cursor: pointer;"
                @onclick="@(() => NavManager.NavigateTo($"/Booking/{booking.Id}"))">
                    @* <td>@booking.UserId</td> *@
                    @* <td>@booking.Id</td> *@
                    <td>@booking.Name</td>
                    <!-- Email -->
                    <td>
                        <!-- Full email on medium and up -->
                        <span class="d-none d-md-inline">@booking.Email</span>

                        <!-- Icon + mailto on small screens -->
                        <a class="d-inline d-md-none" href="mailto:@booking.Email" title="Skicka e-post">
                            <i class="bi bi-envelope-fill"></i>
                        </a>
                    </td>

                    <!-- Phone -->
                    <td>
                        <!-- Full phone on medium and up -->
                        <span class="d-none d-md-inline">@booking.Tel</span>

                        <!-- Icon + tel on small screens -->
                        <a class="d-inline d-md-none" href="tel:@booking.Tel" title="Ring">
                            <i class="bi bi-telephone-fill"></i>
                        </a>
                    </td>
                    @* <td>@booking.BookedAt.ToString("dd/MM/yyyy | HH:mm")</td> *@
                    <td>
                        @if (booking.Reserve)
                        {
                            <span class="badge rounded-pill text-bg-primary p-2">Ja</span>
                        }
                        else
                        {
                            <span class="badge rounded-pill text-bg-warning p-2">Nej</span>
                        }
                    </td>
                    <td>
                        @if (booking.Unbooked)
                        {
                            <span class="badge rounded-pill text-bg-primary p-2">Ja</span>
                        }
                        else
                        {
                            <span class="badge rounded-pill text-bg-warning p-2">Nej</span>
                        }
                    </td>
                    <td class="text-nowrap">
                        <div class="d-flex flex-column flex-md-row">
                            @* <button class="btn btn-sm btn-outline-primary mb-1 mb-md-0 me-md-1"
                            title="Ändra"
                            @onclick="async () => await EditBooking(booking.Id)">
                                <i class="bi bi-pencil"></i>
                            </button> *@
                            <button class="btn btn-sm btn-outline-warning mb-1 mb-md-0 me-md-1"
                            title="Avboka"
                            @onclick:stopPropagation
                            @onclick="async () => await Unbook(booking.Id)">
                                <i class="bi bi-x"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger"
                            title="Ta bort"
                            @onclick:stopPropagation
                            @onclick="async () => await ShowAlert(booking.Id)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @* <a class="btn btn-primary mb-3 me-2" href="/Bookings/Book/@Id">Lägg till deltagare</a> *@
    <a class="btn btn-primary mb-3 me-2" @onclick="async () => await AddGuest(Id)">Lägg till deltagare</a>
}

@inject IJSRuntime JS
@inject SweetAlertService Swal
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IEventService EventService
@inject IBookingService BookingService
@inject IUserService UserService

@code {
    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    private bool _value;
    [Parameter]
    public bool Value
    {
        get { return _value; }
        set
        {
            if (_value != value)
                _value = value;
            ValueChanged.InvokeAsync(_value);
        }
    }

    [Parameter]
    public EventCallback<bool> ShowReserveChanged { get; set; }

    private bool _showReserve;
    [Parameter]
    public bool ShowReserve
    {
        get { return _showReserve; }
        set
        {
            if (_showReserve != value)
                _showReserve = value;
            ShowReserveChanged.InvokeAsync(_showReserve);
        }
    }

    [Parameter]
    public int Id { get; set; }

    public List<Booking> Bookings { get; set; } = new();
    public BookingDto BookingDtoData { get; set; } = new();

    public Event? eventData { get; set; } = null;
    public EventDto EventDtoData { get; set; } = new();
    public JsonNode Errors { get; set; } = new JsonObject();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // eventData = await Http.GetFromJsonAsync<Event>("api/Events/" + Id);
            eventData = await EventService.GetEventByIdAsync(Id);
            EventDtoData.Title = eventData?.Title ?? "";
            EventDtoData.Description = eventData?.Description ?? "";
            EventDtoData.Start = eventData?.Start ?? DateTime.Now;
            EventDtoData.End = eventData?.End;
            EventDtoData.AllDay = eventData?.AllDay ?? false;
            EventDtoData.MaxSlots = eventData?.MaxSlots ?? 0;
            EventDtoData.Recurring = eventData?.Recurring ?? false;
            EventDtoData.Gender = eventData?.Gender ?? Gender.Male;
            EventDtoData.Hidden = eventData?.Hidden ?? false;
            EventDtoData.AllowFriendBooking = eventData?.AllowFriendBooking ?? false;

            var allBookings = await BookingService.GetBookingsAsync();
            Bookings = allBookings?.Where(b => b.EventId == Id).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception: " + ex.Message);
        }
    }

    private async Task SaveEvent()
    {
        try
        {
            await EventService.EditEventAsync(Id, EventDtoData);

            await JS.InvokeVoidAsync("Swal.fire", "Lyckades", "Pass ändrat!", "success");
            NavManager.NavigateTo("/Events");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error editing FAQ: {ex.Message}");
            await JS.InvokeVoidAsync("Swal.fire", "Fel", "Kunde inte spara ändring.", "error");
        }
    }

    private async Task Unbook(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Bekräfta avbokning",
                Text = $"Avboka bokning med ID {id}?",
                ShowCancelButton = true,
                ConfirmButtonText = "Ja, avboka",
                CancelButtonText = "Nej, avboka inte",
            });
        if (result.IsConfirmed)
        {
            try
            {
                await BookingService.UnbookAsync(id);
                var res = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Avbokad",
                        Text = $"Bokning med id {id} är avbokad",
                        Icon = SweetAlertIcon.Warning,
                    });
                var allBookings = await BookingService.GetBookingsAsync();
                Bookings = allBookings?.Where(b => b.EventId == Id).ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error unbooking: {ex.Message}");
                await JS.InvokeVoidAsync("Swal.fire", "Fel", "Kunde inte avboka.", "error");
            }
        }

    }

    private async Task DeleteBooking(int id)
    {
        // await Http.DeleteAsync("api/Bookings/" + id);
        // var allBookings = await Http.GetFromJsonAsync<List<Booking>>("api/Bookings/");
        // Bookings = allBookings?.Where(b => b.EventId == Id).ToList();
        await BookingService.RemoveBookingAsync(id);
        var allBookings = await BookingService.GetBookingsAsync();
        Bookings = allBookings?.Where(b => b.EventId == Id).ToList();
    }

    // private async Task EditBooking(int id)
    // {
    //     // Get current booking
    //     var getBooking = await http.GetFromJsonAsync<Booking>($"api/Bookings/{id}");

    //     // Get all bookings for count check
    //     var allBookings = await http.GetFromJsonAsync<List<Booking>>("api/Bookings/");
    //     var countSpots = allBookings?
    //         .Where(b => b.EventId == getBooking?.EventId && b.Unbooked == false)
    //         .Count();

    //     // Get user-edited values via JS
    //     string json = await JS.InvokeAsync<string>("showFormAlert", getBooking);

    //     if (!string.IsNullOrEmpty(json))
    //     {
    //         try
    //         {
    //             var booking = JsonSerializer.Deserialize<BookingDto>(json, new JsonSerializerOptions
    //                 {
    //                     PropertyNameCaseInsensitive = true
    //                 });

    //             // Check if the user is trying to RE-BOOK a previously unbooked spot
    //             if (getBooking.Unbooked == true && booking.Unbooked == false)
    //             {
    //                 // Check if there are any spots left
    //                 var eventData = await http.GetFromJsonAsync<Event>($"api/Events/{Id}");
    //                 var maxSlots = eventData?.MaxSlots ?? 0;

    //                 if (countSpots >= maxSlots)
    //                 {
    //                     await JS.InvokeVoidAsync("Swal.fire", "Misslyckades", "Det finns inga lediga platser kvar", "error");
    //                     return;
    //                 }
    //             }

    //             // Set additional required fields
    //             booking.EventId = Id;
    //             booking.BookedAt = getBooking.BookedAt;

    //             var response = await http.PutAsJsonAsync($"api/Bookings/{id}", booking);
    //             if (response.IsSuccessStatusCode)
    //             {
    //                 await JS.InvokeVoidAsync("Swal.fire", "Lyckades", "Bokning ändrad!", "success");

    //                 // Refresh booking list
    //                 var updatedBookings = await http.GetFromJsonAsync<List<Booking>>("api/Bookings/");
    //                 Bookings = updatedBookings?.Where(b => b.EventId == Id).ToList();

    //                 StateHasChanged();
    //             }
    //             else
    //             {
    //                 await JS.InvokeVoidAsync("Swal.fire", "Misslyckades", "Det gick inte att spara bokningen", "error");
    //             }
    //         }
    //         catch (JsonException ex)
    //         {
    //             Console.WriteLine($"Error deserializing booking: {ex.Message}");
    //         }
    //     }
    // }


    private async Task ShowAlert(int id)
    {
        // await JS.InvokeVoidAsync("alert", "This is a Blazor alert!");

        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Bekräfta borttagning",
                Text = $"Ta bort bokning med ID {id}? Detta kan inte ångras.",
                ShowCancelButton = true,
                ConfirmButtonText = "Ja, ta bort",
                CancelButtonText = "Nej, ta inte bort",
            });
        if (result.IsConfirmed)
        {
            await DeleteBooking(id);
        }
    }

    private async Task AddReserve(int id)
    {
        int eventId = id; // or get it from your component context
        string json = await JS.InvokeAsync<string>("showBookingForm", eventId);

        if (!string.IsNullOrEmpty(json))
        {
            try
            {
                var booking = JsonSerializer.Deserialize<Booking>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                booking.Reserve = true;
                booking.EventId = id;
                var response = await Http.PostAsJsonAsync("api/Bookings", booking);
                if (response.IsSuccessStatusCode)
                {
                    await JS.InvokeVoidAsync("Swal.fire", "Success", "Ny gäst tillagd i reservlistan!", "success");
                    var allBookings = await Http.GetFromJsonAsync<List<Booking>>("api/Bookings/");
                    Bookings = allBookings?.Where(b => b.EventId == Id).ToList();
                }
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"Error deserializing booking: {ex.Message}");
            }
        }
    }


    private async Task AddGuest(int id)
    {
        int eventId = id; // or get it from your component context
        var limit = EventDtoData.MaxSlots;
        if (Bookings.Where(b => b.Unbooked == false).Count() < EventDtoData.MaxSlots)
        {
            string json = await JS.InvokeAsync<string>("showBookingForm", eventId);

            if (!string.IsNullOrEmpty(json))
            {
                try
                {
                    var booking = JsonSerializer.Deserialize<BookingDto>(json, new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });
                    try
                    {
                        await BookingService.AddBookingAsync(booking);
                        await JS.InvokeVoidAsync("Swal.fire", "Tillagd", "Ny gäst tillagd!", "success");
                        var allBookings = await BookingService.GetBookingsAsync();
                        Bookings = allBookings?.Where(b => b.EventId == Id).ToList();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error deserializing booking: {ex.Message}");
                        await JS.InvokeVoidAsync("Swal.fire", "Fel", "Fel vid tillägning!", "error");
                    }
                }
                catch (JsonException ex)
                {
                    Console.WriteLine($"Error deserializing booking: {ex.Message}");
                }
            }

        }
        else
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Fullbokat",
                    Text = "Passet är fullbokat",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Lägg till på reservlistan",
                    CancelButtonText = "Avbryt",
                });
            if (result.IsConfirmed)
            {
                await AddReserve(id);
            }

        }

    }
}
