@page "/register"
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using Aufguss.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthProvider

<div class="d-flex p-5">
    <div class="card p-4 bg-info-subtle">
        <div class="card-body p-5">
            <h3 class="mb-4">Registrera dig</h3>
            <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mt-3">
                    <InputText class="form-control" @bind-Value="registerModel.Email" type="email" placeholder="Email" />
                </div>
                <div class="mt-3">
                    <InputText class="form-control" @bind-Value="registerModel.Password" type="password" placeholder="Lösenord" />
                </div>
                <div class="mt-3">
                    <InputText class="form-control" @bind-Value="registerModel.ConfirmPassword" type="password" placeholder="Bekräfta lösenord" />
                </div>
                <div class="mt-3">
                    <InputText class="form-control" @bind-Value="registerModel.PhoneNumber" type="tel" placeholder="Telefonnummer" />
                </div>
                <div class="mt-3">
                    <InputText class="form-control" @bind-Value="registerModel.FirstName" placeholder="Förnamn" />
                </div>
                <div class="mt-3">
                    <InputText class="form-control" @bind-Value="registerModel.SurName" placeholder="Efternamn" />
                </div>
                <div class="mt-3">
                    <InputSelect class="form-control" @bind-Value="registerModel.Gender">
                        <option value="">-- Kön --</option>
                        @foreach (var gender in Enum.GetValues(typeof(Gender)).Cast<Gender>().Where(g => g != Gender.Other))
                        {
                            <option value="@gender">@GetDisplayName(gender)</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-check mt-3">
                    <InputCheckbox @bind-Value="ConsentGiven" class="form-check-input" id="consentCheck" />
                    <label class="form-check-label" for="consentCheck">
                        Jag godkänner lagring av mina personuppgifter
                    </label>
                </div>
                <button class="btn btn-primary mt-3" type="submit">Spara</button>
            </EditForm>
        </div>
    </div>
</div>


@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}

@code {
    private RegisterDto registerModel = new();
    private string errorMessage;

    private bool ConsentGiven;

    private async Task HandleRegister()
    {
        var path = new Uri(Http.BaseAddress, "api/auth/register").ToString();

        var response = await Http.PostAsJsonAsync(path, registerModel);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/Login");
            // var loginPath = new Uri(Http.BaseAddress, "api/auth/login").ToString();
            // var loginResponse = await Http.PostAsJsonAsync(loginPath, new
            // {
            //     Email = registerModel.Email,
            //     Password = registerModel.Password
            // });

            // if (loginResponse.IsSuccessStatusCode)
            // {
            //     var token = await loginResponse.Content.ReadAsStringAsync();

            //     // Store token in localStorage (or sessionStorage)
            //     await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token);

            //     // Notify auth system (if using custom AuthStateProvider)
            //     ((CustomAuthStateProvider)AuthProvider).NotifyUserAuthentication(token);

            //     Navigation.NavigateTo("/");
            // }
            // else
            // {
            //     errorMessage = "Registration successful, but auto-login failed.";
            // }
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            errorMessage = $"Registration failed: {error}";
        }
    }

    public class RegisterDto
    {
        [Required(ErrorMessage = "Email är obligatoriskt")]
        [EmailAddress(ErrorMessage = "Ogiltig emailadress")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Lösenord är obligatoriskt")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Lösenordet måste vara minst 6 tecken långt")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Bekräfta lösenord är obligatoriskt")]
        [Compare("Password", ErrorMessage = "Lösenorden matchar inte")]
        public string ConfirmPassword { get; set; }

        [Required(ErrorMessage = "Telefonnummer är obligatoriskt")]
        [Phone(ErrorMessage = "Ogiltigt telefonnummer")]
        public string PhoneNumber { get; set; }

        [Required(ErrorMessage = "Förnamn är obligatoriskt")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Efternamn är obligatoriskt")]
        public string SurName { get; set; }

        [Required(ErrorMessage = "Kön är obligatoriskt")]
        public Gender? Gender { get; set; }
    }

    public enum Gender
    {
        [Display(Name = "Man")]
        Male,

        [Display(Name = "Kvinna")]
        Female,

        [Display(Name = "Annat")]
        Other
    }

    public static string GetDisplayName(Enum value)
    {
        return value.GetType()
            .GetMember(value.ToString())
            .First()
            .GetCustomAttribute<DisplayAttribute>()?
            .GetName() ?? value.ToString();
    }
}