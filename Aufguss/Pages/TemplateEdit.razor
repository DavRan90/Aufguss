@page "/Templates/Edit/{id:int}"
@attribute [Authorize(Roles = "Admin,SuperAdmin")]
@using System.Text.Json.Nodes
@using Aufguss.Models

<div class="row mb-5">
    <div class="col-lg-8">
        <h1 class=mb-5>Ändra aktivitet</h1>

        @if (eventData == null)
        {
            <p><em>Loading...</em></p>
        }

        else
        {
            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Id</label>
                <div class="col-md-8">
                    <input class="form-control-plaintext" readonly value="@Id">
                </div>
            </div>

            <div class="row mb-3">
                <div>
                    <label class="col-md-4 col-form-label">Kön</label>
                    <input type="radio" checked="@(EventDtoData.Gender == Gender.Male)"
                           name="Gender" @onchange="@(() => EventDtoData.Gender = Gender.Male)" />
                    <label>Herrar</label>

                    <input type="radio" checked="@(EventDtoData.Gender == Gender.Female)"
                           name="Gender" @onchange="@(() => EventDtoData.Gender = Gender.Female)" />
                    <label>Damer</label>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Titel</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="EventDtoData.Title">
                    <span class="text-danger">@Errors["Title"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Datum/tid</label>
                <div class="col-md-8">
                    <input type="datetime-local" class="form-control" @bind="EventDtoData.Start">
                    <span class="text-danger">@Errors["Start"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Max antal gäster</label>
                <div class="col-md-8">
                    <input class="form-control" type="number" @bind="EventDtoData.MaxSlots">
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Beskrivning</label>
                <div class="col-md-8">
                    <textarea class="form-control" @bind="EventDtoData.Description"></textarea>
                    <span class="text-danger">@Errors["Description"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-8 offset-md-4">
                    <div>
                        <input type="checkbox" id="gridCheck1" @bind="EventDtoData.Recurring">
                        <label style="vertical-align: top;" class="form-check-label m-1" for="gridCheck1">
                            Återkommande
                        </label>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-8 offset-md-4">
                    <div>
                        <input type="checkbox" id="gridCheck2" @bind="EventDtoData.Hidden">
                        <label style="vertical-align: top;" class="form-check-label m-1" for="gridCheck2">
                            Dold
                        </label>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="offset-md-4 col-md-4 d-grid">
                    <button class="btn btn-primary" @onclick="SaveEvent">Spara</button>
                </div>
                <div class="col-md-4 d-grid">
                    <a class="btn btn-outline-primary" href="/Templates">Avbryt</a>
                </div>
            </div>
        }

    </div>
</div>

@inject IJSRuntime JS
@inject SweetAlertService Swal
@inject HttpClient http
@inject NavigationManager navManager

@code {
    [Parameter]
    public int Id { get; set; }

    public EventTemplate? eventData { get; set; } = null;
    public EventDto EventDtoData { get; set; } = new();
    public JsonNode Errors { get; set; } = new JsonObject();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            eventData = await http.GetFromJsonAsync<EventTemplate>("api/EventTemplates/" + Id);
            EventDtoData.Title = eventData?.Title ?? "";
            EventDtoData.Description = eventData?.Description ?? "";
            EventDtoData.Start = eventData?.Start ?? DateTime.Now;
            EventDtoData.End = eventData?.End;
            EventDtoData.MaxSlots = eventData?.MaxSlots ?? 0;
            EventDtoData.Recurring = eventData?.Recurring ?? false;
            EventDtoData.Gender = eventData?.Gender ?? Gender.Male;
            EventDtoData.Hidden = eventData?.Hidden ?? false;

            // var allBookings = await http.GetFromJsonAsync<List<Booking>>("api/Bookings/");
            // Bookings = allBookings?.Where(b => b.EventId == Id).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception: " + ex.Message);
        }
    }

    private async Task SaveEvent()
    {
        var response = await http.PutAsJsonAsync("api/EventTemplates/" + Id, EventDtoData);

        if (response.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/Templates");
        }

        else
        {
            // await JS.InvokeVoidAsync("Swal.fire", "Misslyckades", "Bokningen går inte att dölja eftersom det finns gäster bokade", "error");
            var strResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Json Response: \n" + strResponse);

            try
            {
                var jsonResponse = JsonNode.Parse(strResponse);

                // Try to read a general message first
                var message = jsonResponse?["message"]?.ToString();

                // If no general message, try to read validation errors
                Errors = jsonResponse?["errors"] ?? new JsonObject();

                if (!string.IsNullOrWhiteSpace(message))
                {
                    await JS.InvokeVoidAsync("Swal.fire", "Misslyckades", message, "error");
                }
                else
                {
                    await JS.InvokeVoidAsync("Swal.fire", "Misslyckades", "Ett fel inträffade. Kontrollera formuläret.", "error");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception: " + ex.Message);
            }
        }
    }
}
