@page "/Inställningar"
@attribute [Authorize(Roles = "Admin,SuperAdmin")]
@using Aufguss.Models
@using System.Text.Json.Nodes

<h3 class="mb-5">Ändra inställningar för saker och ting</h3>

<EditForm Model="SiteSettingsData" OnValidSubmit="SaveSettings">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3">
        <label class="col-md-2 col-form-label">Max nyheter på startsidan</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="SiteSettingsData.MaxNews" />
            <ValidationMessage For="@(() => SiteSettingsData.MaxNews)" />
        </div>
    </div>

    <div class="row mb-3">
        <label class="col-md-2 col-form-label">Ta bort bild</label>
        <div class="col-md-4">
            <select class="form-select" disabled @onchange="OnImageSelect">
                <option disabled selected>Välj en bild</option>
                @foreach (var image in ImageOptions)
                {
                    <option value="@image">@Path.GetFileName(image)</option>
                }
            </select>

            @if (!string.IsNullOrEmpty(SelectedImageUrl))
            {
                <div>
                    <img src="@SelectedImageUrl" class="img-thumbnail mt-2" style="max-height: 200px;" />
                </div>
                <button class="btn btn-primary">Ta bort bild</button>
            }
        </div>
    </div>

    <h3>Aufguss</h3>



    <div class="row mb-3">
        <label class="col-md-2 col-form-label">Max bokningar aufguss</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="SiteSettingsData.MaxBookingsAufguss" />
            <ValidationMessage For="@(() => SiteSettingsData.MaxBookingsAufguss)" />
        </div>
    </div>

    <div class="row mb-3">
        <label class="col-md-2 col-form-label">Dagar innan dold bokning blir synlig</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="SiteSettingsData.AufgussHiddenDaysInAdvance" />
            <ValidationMessage For="@(() => SiteSettingsData.AufgussHiddenDaysInAdvance)" />
        </div>
    </div>

    <div class="row mb-3">
        <h3>Vattenfys</h3>
        <div class="alert alert-danger col-md-6 mt-2" role="alert">
            ⚠️ Funktioner inte tillagda.
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-md-2 col-form-label">Max bokningar vattenfys</label>
        <div class="col-md-4">
            <InputNumber class="form-control" disabled @bind-Value="SiteSettingsData.MaxBookingsVattenfys" />
            <ValidationMessage For="@(() => SiteSettingsData.MaxBookingsVattenfys)" />
        </div>
    </div>

    <div class="row mb-3">
        <label class="col-md-2 col-form-label">Dagar innan dold bokning blir synlig</label>
        <div class="col-md-4">
            <InputNumber class="form-control" disabled @bind-Value="SiteSettingsData.VattenfysHiddenDaysInAdvance" />
            <ValidationMessage For="@(() => SiteSettingsData.VattenfysHiddenDaysInAdvance)" />
        </div>
    </div>



    <div class="row">
        <div class="offset-md-2 col-md-2 d-grid">
            <button type="submit" class="btn btn-primary">Spara inställningar</button>
        </div>
    </div>
</EditForm>

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager navManager
@inject SweetAlertService Swal
@inject IJSRuntime JSRuntime
@inject ISettingsService SettingsService

@code {
    public JsonNode Errors { get; set; } = new JsonObject();
    private List<string> ImageOptions = new();
    private string SelectedImageUrl;
    private bool ImageSelected = false;
    private string fileLocation = "";

    private void OnImageSelect(ChangeEventArgs e)
    {
        SelectedImageUrl = e.Value?.ToString();
        ImageSelected = true;
        // EntryDtoData.Image = SelectedImageUrl; // Bind selected image URL to your model
    }

    private SiteSettings SiteSettingsData = new();

    protected override async Task OnInitializedAsync()
    {
        fileLocation = new Uri(Http.BaseAddress, "api/upload/").ToString();
        ImageOptions = await Http.GetFromJsonAsync<List<string>>("api/upload/news");
        // SiteSettingsData = await Http.GetFromJsonAsync<SiteSettings>("api/settings/");
        SiteSettingsData = await SettingsService.GetSettingsAsync();
    }

    private async Task SaveSettings()
    {
        try
        {
            await SettingsService.EditSettingsAsync(SiteSettingsData);
            await JSRuntime.InvokeVoidAsync("Swal.fire", "Ändrat", "Inställningarna är nu ändrade", "success");
        }
        catch (Exception ex)
            {
                Console.WriteLine("Exception: " + ex.Message);
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Misslyckades", "Inställningarna gick inte att ändra", "error");
            }
    }
}
