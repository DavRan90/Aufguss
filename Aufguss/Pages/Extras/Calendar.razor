@page "/Calendar"
@using Aufguss.Models
@using BlazorCalendar
@using BlazorCalendar.Models
@using System.Text.Json

<div class="d-flex justify-content-center align-items-center">
    <button class="btn btn-primary m-3" @onclick="@(() => ChangeMonth(-1))">←</button>
    <h3 class="mx-2 text-center" style="width: 15ch;">@Capitalize(FirstDate.ToString("MMMM yyyy"))</h3>
    <button class="btn btn-primary m-3" @onclick="@(() => ChangeMonth(1))">→</button>
</div>

@* <CalendarContainer TasksList="@ModelTasks" DisplayedView="DisplayedView.Weekly" FirstDate="@FirstDate">
    <WeekView TaskClick="OnTaskClick"></WeekView>
</CalendarContainer> *@

<CalendarContainer TasksList="@ModelTasks" DisplayedView="DisplayedView.Monthly" FirstDate="@FirstDate">
    <MonthlyView TaskClick="OnTaskClick" SaturdayColor="White" SundayColor="White" HighlightToday/>
</CalendarContainer>

<p class="btn btn-sm bg-primary-subtle mt-2">Herrar</p>
<p class="btn btn-sm bg-danger-subtle mt-2">Damer</p>
<p class="btn btn-sm bg-warning-subtle mt-2">Fullbokat</p>
<p class="btn btn-sm bg-body-secondary mt-2">Passerat</p>
<p class="btn btn-sm border border-2 border-danger mt-2">Idag</p>

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject SweetAlertService Swal

@code {


    private List<Event>? evts;

    private int guestCount;

    private BlazorCalendar.Models.Tasks[]? ModelTasks;

    private DateTime FirstDate = DateTime.Today;  // or whatever month you want to start

    private string Capitalize(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;
        return char.ToUpper(input[0]) + input.Substring(1);
    }

    public void ChangeMonth(int change)
    {
        FirstDate = FirstDate.AddMonths(change);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var allEvents = await Http.GetFromJsonAsync<List<Event>>("api/Events");
        var allBookings = await Http.GetFromJsonAsync<List<Booking>>("api/Bookings");
        evts = allEvents.Where(e => e.Hidden == false).ToList();

        ModelTasks = new BlazorCalendar.Models.Tasks[evts.Count];

        for (int i = 0; i < evts.Count; i++)
        {
            var evt = evts[i];
            guestCount = allBookings.Where(b => b.EventId == evt.Id && b.Reserve == false && b.Unbooked == false).Count();
            bool sessionFull = evt.MaxSlots == guestCount;
            bool sessionOver = evt.Start < DateTime.Now;
            // Map your Event to a Task
            ModelTasks[i] = new BlazorCalendar.Models.Tasks
                {
                    ID = evt.Id,
                    Caption = (evt.Gender, evt.Hidden) switch
                    {
                        (Gender.Male, false) => "Herrar",
                        (Gender.Female, false) => "Damer",
                        _ => "lightgray"
                    },
                    DateStart = evt.Start,   // Assuming your Event has StartDate
                    DateEnd = evt.End ?? evt.Start,
                    Color = (evt.Gender, sessionFull, sessionOver) switch
                    {
                        (Gender.Male, false, false) => "lightblue",
                        (Gender.Female, false, false) => "lightpink",
                        (Gender.Male, true, false) => "lightyellow",
                        (Gender.Female, true, false) => "lightyellow",
                        _ => "lightgray"
                    },
                    Comment = evt.Description    // Optional
                };
        }
    }

    private async Task OnTaskClick(ClickTaskParameter clickInfo)
    {
        var task = clickInfo.IDList;
        var booking = await Http.GetFromJsonAsync<Event>($"api/Events/{task[0]}");
        if(booking.Start > DateTime.Now)
        {
            NavManager.NavigateTo($"/Bookings/Book/{task[0]}");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("Swal.fire", "För sent", "Passet har redan start!", "error");
        }

    }

    private Task OnDragStart(DragDropParameter dragStartInfo)
    {
        // Capture the ID of the dragged task (first one if multiple)
        if (dragStartInfo.taskID != 0)
        {
            Console.WriteLine($"Drag started for task ID: {dragStartInfo.taskID}");
        }

        return Task.CompletedTask;
    }

    private async Task OnDragDrop(DragDropParameter dropInfo)
    {
        if (dropInfo.taskID != 0 && ModelTasks is not null && evts is not null)
        {
            // Update the calendar task visually
            var task = ModelTasks.FirstOrDefault(t => t.ID == dropInfo.taskID);
            if (task != null)
            {
                task.DateStart = dropInfo.Day;
                task.DateEnd = dropInfo.Day;
            }

            // Find the corresponding event object (used for the API)
            var evt = evts.FirstOrDefault(e => e.Id == dropInfo.taskID);
            if (evt != null)
            {
                evt.Start = dropInfo.Day;

                try
                {
                    var response = await Http.PutAsJsonAsync($"api/Events/{evt.Id}", evt);

                    if (!response.IsSuccessStatusCode)
                    {
                        Console.WriteLine($"Failed to update event {evt.Id}: {response.StatusCode}");
                        // Optional: revert task if you want to undo on failure
                    }
                    else
                    {
                        Console.WriteLine($"Event {evt.Id} updated successfully.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error updating event: {ex.Message}");
                }
            }

            await InvokeAsync(StateHasChanged); // Refresh UI
        }
    }

    private async Task OnDayClick(ClickEmptyDayParameter clickedDate)
    {

        string json = await JSRuntime.InvokeAsync<string>("showCreateEventAlert", new EventDto());
        //string json = await JSRuntime.InvokeAsync<string>("showEventForm");

        if (!string.IsNullOrEmpty(json))
        {
            try
            {
                var newEvent = JsonSerializer.Deserialize<Event>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                newEvent.Start = clickedDate.Day;
                var response = await Http.PostAsJsonAsync("api/Events", newEvent);

                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("Swal.fire", "Success", "Nytt pass tillagt!", "success");
                    var createdEvent = await response.Content.ReadFromJsonAsync<Event>();

                    // Add to evts
                    evts?.Add(createdEvent!);

                    // Add to ModelTasks so it shows up in the calendar
                    var newTask = new Tasks
                        {
                            ID = createdEvent!.Id,
                            Caption = createdEvent.Title,
                            DateStart = createdEvent.Start,
                            DateEnd = createdEvent.Start,
                            Color = createdEvent.Gender switch
                            {
                                Gender.Male => "lightblue",
                                Gender.Female => "lightpink",
                                _ => "gray"
                            },
                            Comment = createdEvent.Description
                        };

                    // Add to calendar tasks and refresh
                    ModelTasks = ModelTasks?.Append(newTask).ToArray();
                    await InvokeAsync(StateHasChanged);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to create event.");
                }
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"Error deserializing booking: {ex.Message}");
            }
        }
    }
}