@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthProvider

<div class="d-flex p-5">
    <div class="card p-4 bg-info-subtle">
        <div class="card-body p-5">
            <h3 class="mb-4">Logga in</h3>
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <div class="mt-3">
                    <InputText class="form-control" @bind-Value="loginModel.Email" placeholder="Email" />
                </div>
                <div class="mt-3">
                    <InputText class="form-control" @bind-Value="loginModel.Password" type="password" placeholder="Lösenord" />
                </div>
                <button class="btn btn-primary mt-3" type="submit">Login</button>
            </EditForm>
        </div>
    </div>
</div>

@* <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <InputText @bind-Value="loginModel.Email" placeholder="Email" />
    <InputText @bind-Value="loginModel.Password" type="password" placeholder="Password" />
    <button type="submit">Login</button>
</EditForm> *@

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red">@errorMessage</p>
}

@code {
    private LoginModel loginModel = new();
    private string errorMessage;

    private async Task HandleLogin()
    {
        var path = new Uri(Http.BaseAddress, "api/auth/login").ToString();
        // var response = await Http.PostAsJsonAsync("https://localhost:7162/api/auth/login", loginModel);
        var response = await Http.PostAsJsonAsync(path, loginModel);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<AuthResponse>();
            var token = result?.Token;

            if (!string.IsNullOrEmpty(token))
            {
                // Save token
                await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token);

                // 2. Notify the app of login
                ((Services.CustomAuthStateProvider)AuthProvider).NotifyUserAuthentication(result.Token);

                // Optionally redirect
                Navigation.NavigateTo("/");
            }
        }
        else
        {
            errorMessage = "Login failed. Please check your credentials.";
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    public class AuthResponse
    {
        public string Token { get; set; }
    }
}